version: 2

# TODO: These builds are currently configured to
# install the needed dependencies in each container
# at the start of each build. The dependencies aren't huge,
# but that is slower and does waste some bandwidth.
# We should eventually roll the set up for each
# container into a separate dockerfile and push custom
# build images to dockerhub so that setting up packages
# during the actual CI testing is no longer necessary.

jobs:
  "Debian":
    docker:
      - image: debian:10
    steps:
      - checkout
      - run: |
          apt-get -q update -y
          apt-get -q install -y \
            cmake \
            g++ \
            gcc \
            libboost-iostreams-dev \
            libboost-serialization-dev \
            libeigen3-dev \
            libmpich-dev \
            llvm-7-dev \
            mpich \
            zlib1g-dev

          chmod 755 /root
          useradd runner
          mkdir -p /tmp/build

          cmake -S . -B /tmp/build -DENABLE_DIST_GALOIS=ON
          cmake --build /tmp/build --target input
          cmake --build /tmp/build --parallel 2
          # Run tests as non-root otherwise MPI will complain
          (cd /tmp/build \
            && chown -R runner . \
            && su runner -c "ctest -V --label-regex quick --parallel 2")
  "Ubuntu-18.04":
    docker:
      - image: ubuntu:18.04
    steps:
      - checkout
      - run: |
          apt-get -q update -y
          apt-get -q install -y apt-transport-https ca-certificates gnupg software-properties-common wget
          wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | apt-key add -
          apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main'
          apt-get -q update -y

          apt-get -q install -y \
            cmake \
            g++ \
            gcc \
            libboost-all-dev \
            libeigen3-dev \
            libopenmpi-dev \
            llvm-7-dev \
            openmpi-bin \
            ssh

          chmod 755 /root
          useradd runner
          mkdir -p /tmp/build

          cmake -S . -B /tmp/build -DENABLE_DIST_GALOIS=ON
          cmake --build /tmp/build --target input
          cmake --build /tmp/build --parallel 2
          (cd /tmp/build \
            && chown -R runner . \
            && su runner -c "ctest -V --label-regex quick --parallel 2")
  "CentOS-8-gcc":
    docker:
      - image: centos:8
    steps:
      - checkout
      - run: |
          # Needs to access PowerTools packages for eigen, so get access to those
          yum -y -q install dnf-plugins-core
          yum -y -q config-manager --set-enabled PowerTools
          yum -y -q install \
            boost-devel \
            cmake \
            eigen3-devel \
            gcc \
            gcc-c++ \
            llvm-devel \
            llvm-static \
            make \
            mpich-devel \
            ncurses-devel \
            wget \
            zlib-devel

          wget -O - https://github.com/Kitware/CMake/releases/download/v3.17.0/cmake-3.17.0-Linux-x86_64.tar.gz | tar -xz -f - -C /usr/local
          ln -s /usr/local/cmake-3.17.0-Linux-x86_64/bin/cmake /usr/local/bin/cmake
          ln -s /usr/local/cmake-3.17.0-Linux-x86_64/bin/ctest /usr/local/bin/ctest

          # Make the "module" command work in this shell session.
          source /etc/profile.d/modules.sh
          module load mpi

          chmod 755 /root
          useradd runner
          mkdir -p build

          cmake -S . -B /tmp/build -DENABLE_DIST_GALOIS=ON
          cmake --build /tmp/build --target input
          cmake --build /tmp/build --parallel 2
          (cd /tmp/build \
            && chown -R runner . \
            && su runner -c "ctest -V --label-regex quick --parallel 2")
  "CentOS-8-clang":
    docker:
      - image: centos:8
    steps:
      - checkout
      - run: |
          # Needs to access PowerTools packages for eigen, so get access to those
          yum -y -q install dnf-plugins-core
          yum -y -q config-manager --set-enabled PowerTools
          yum -y -q install \
            boost-devel \
            eigen3-devel \
            llvm-devel \
            llvm-static \
            make \
            ncurses-devel \
            openmpi-devel \
            wget \
            zlib-devel
          yum module -y -q install llvm-toolset

          wget -O - https://github.com/Kitware/CMake/releases/download/v3.17.0/cmake-3.17.0-Linux-x86_64.tar.gz | tar -xz -f - -C /usr/local
          ln -s /usr/local/cmake-3.17.0-Linux-x86_64/bin/cmake /usr/local/bin/cmake
          ln -s /usr/local/cmake-3.17.0-Linux-x86_64/bin/ctest /usr/local/bin/ctest

          chmod 755 /root
          useradd runner
          mkdir -p /tmp/build

          # Make the "module" command work in this shell session.
          source /etc/profile.d/modules.sh
          module load mpi
          cmake \
            -S . \
            -B /tmp/build \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DENABLE_DIST_GALOIS=ON
          cmake --build /tmp/build --target input
          cmake --build /tmp/build --parallel 2
          # OpenMPI segfaults here issue #118
          (cd /tmp/build \
            && chown -R runner . \
            && su runner -c "ctest -V --label-regex quick --parallel 2") || true
  "Arch":
    docker:
      - image: archlinux/base
    steps:
      - checkout
      - run: |
          pacman -Sy
          # NB(ddn): make requires libffi but its package doesn't depend on it.
          pacman -q -S --noconfirm \
            boost \
            cmake \
            eigen \
            gcc \
            libffi \
            llvm \
            make \
            openmpi

          chmod 755 /root
          useradd runner
          mkdir -p /tmp/build

          cmake -S . -B /tmp/build -DENABLE_DIST_GALOIS=ON
          cmake --build /tmp/build --target input
          cmake --build /tmp/build --parallel 2
          (cd /tmp/build \
            && chown -R runner . \
            && su runner -c "ctest -V --label-regex quick --parallel 2")
  "Alpine":
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run: |
          apk add --no-cache --no-progress \
            boost-dev \
            cmake \
            eigen \
            g++ \
            gcc \
            llvm9-dev \
            llvm9-static \
            make \
            musl-dev \
            openssh-client \
            zlib-dev
          apk add --no-cache --no-progress \
            --repository http://dl-3.alpinelinux.org/alpine/edge/testing/ \
            openmpi-dev

          chmod 755 /root
          adduser -D runner
          mkdir -p /tmp/build

          cmake -S . -B /tmp/build -DENABLE_DIST_GALOIS=ON
          cmake --build /tmp/build --target input
          cmake --build /tmp/build --parallel 2
          (cd /tmp/build \
            && chown -R runner . \
            && su runner -c "ctest -V --label-regex quick --parallel 2")
  "Fedora-gcc":
    docker:
      - image: fedora:latest
    steps:
      - checkout
      - run: |
          yum -y -q install \
            boost-devel \
            cmake \
            eigen3-devel \
            gcc-c++ \
            llvm-devel \
            llvm-static \
            make \
            mpich-devel \
            zlib-devel

          chmod 755 /root
          useradd runner
          mkdir -p /tmp/build

          # Get the "module" function set up before loading MPI.
          . /etc/bashrc
          module load mpi
          cmake -S . -B /tmp/build -DENABLE_DIST_GALOIS=ON
          cmake --build /tmp/build --target input
          cmake --build /tmp/build --parallel 2
          (cd /tmp/build \
            && chown -R runner . \
            && su runner -c "ctest -V --label-regex quick --parallel 2")
  "Fedora-clang":
    docker:
      - image: fedora:latest
    steps:
      - checkout
      - run: |
          yum -y -q install \
            boost-devel \
            clang \
            cmake \
            eigen3-devel \
            llvm-devel \
            llvm-static \
            make \
            openmpi-devel \
            zlib-devel
          # Get the "module" function set up before loading MPI.

          chmod 755 /root
          useradd runner
          mkdir -p /tmp/build

          . /etc/bashrc
          module load mpi
          cmake \
            -S . \
            -B /tmp/build \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DENABLE_DIST_GALOIS=ON
          cmake --build /tmp/build --target input
          cmake --build /tmp/build --parallel 2
          (cd /tmp/build \
            && chown -R runner . \
            && su runner -c "ctest -V --label-regex quick --parallel 2")
 
workflows:
  version: 2
  build:
    jobs:
      - "Debian"
      - "Ubuntu-18.04"
      - "CentOS-8-gcc"
      - "CentOS-8-clang"
      - "Arch"
      - "Alpine"
      - "Fedora-gcc"
      - "Fedora-clang"
