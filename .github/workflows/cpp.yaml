name: C/C++ CI

on:
  push:
  pull_request:

jobs:
  ###################################################################
  # lint
  ###################################################################
  lint:
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os:
        - ubuntu-18.04
        build_type:
        - Debug
    steps:
    - uses: actions/checkout@v2

    ###
    # Caching between builds
    ###
    - name: Cache conan packages
      uses: actions/cache@v1
      with:
        key: ${{runner.os}}-conan-${{hashFiles('config/conanfile.txt')}}
        path: ~/.conan/data
    - name: Cache ccache objects
      uses: actions/cache@v1
      with:
        key: ${{runner.os}}-ccache-${{matrix.build_type}}
        restore-keys: |
          ${{runner.os}}-ccache-
        path: ~/.ccache

    ###
    # Install platform-level dependencies (OS-specific)
    ###
    - name: install dependencies
      if: startsWith(matrix.os, 'ubuntu-')
      run: |
        sudo apt install -yq ccache curl gcc-9 g++-9 libopenmpi-dev
        sudo update-alternatives --verbose --install /usr/bin/gcc gcc /usr/bin/gcc-9 90
        sudo update-alternatives --verbose --install /usr/bin/g++ g++ /usr/bin/g++-9 90

        sudo apt-add-repository 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main'
        curl -fL https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo apt update
        sudo apt install -yq clang-format-10 clang-tidy-10 llvm-10-dev

        sudo update-alternatives --verbose --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-10 90
        sudo update-alternatives --verbose --install /usr/bin/clang-format clang-format /usr/bin/clang-format-10 90

        clang-format --version
        clang-tidy --version

        sudo -H pip3 install --upgrade pip setuptools
        sudo -H pip3 install conan==1.24
    - name: pre-build
      run: mkdir -p $HOME/build
    - name: install C++ dependencies
      run: |
        .github/workflows/setup_conan.sh
        conan install -if $HOME/build --build=missing config

    - name: check formating
      run: scripts/check_format.sh . || true  # Ignore formatting errors for now.

    ###
    # Standard CMake build process
    ###
    - name: configure
      run: |
        cmake -S . -B $HOME/build \
          -DCMAKE_INSTALL_PREFIX=/tmp \
          -DCMAKE_BUILD_TYPE=${{matrix.build_type}} \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
          -DCMAKE_INSTALL_PREFIX=/tmp \
          -DCMAKE_TOOLCHAIN_FILE=$HOME/build/conan_paths.cmake \
          -DCXX_CLANG_TIDY=clang-tidy \
          -DENABLE_DIST_GALOIS=on
    - name: build
      run: cmake --build $HOME/build --parallel 4

  ###################################################################
  # build_and_test
  ###################################################################
  build_and_test:
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os:
        - ubuntu-18.04
        - macOS-latest
        build_type:
        - Debug
        - Release
        # Only build and test the following configurations:
        #
        # - (ubuntu-18.04, Release, clang++) and
        # - (*, *, g++)
        #
        # to reduce the total number of concurrent jobs.
        #
        # The key "include" exists but only allows for the refinement of an
        # existing matrix "job" (i.e., point in the product space) by adding
        # more variables. Fallback to "exclude".
        cxx:
        - g++
        - clang++
        exclude:
        - os: macOS-latest
          cxx: clang++
        - os: ubuntu-18.04
          build_type: Debug
          cxx: clang++
    steps:
    - uses: actions/checkout@v2

    ###
    # Caching between builds
    ###
    - name: Cache conan packages
      uses: actions/cache@v1
      with:
        key: ${{runner.os}}-conan-${{hashFiles('config/conanfile.txt')}}
        path: ~/.conan/data
    - name: Cache ccache objects
      uses: actions/cache@v1
      with:
        key: ${{runner.os}}-ccache-${{matrix.build_type}}
        restore-keys: |
          ${{runner.os}}-ccache-
        path: ~/.ccache
    - name: Cache graph inputs
      uses: actions/cache@v1
      with:
        key: generic-cache-graph
        path: ~/.cache/graph


    ###
    # Install platform-level dependencies (OS-specific)
    ###
    - name: install dependencies
      if: startsWith(matrix.os, 'ubuntu-')
      run: |
        sudo apt install -yq ccache curl gcc-9 g++-9 libopenmpi-dev
        sudo update-alternatives --verbose --install /usr/bin/gcc gcc /usr/bin/gcc-9 90
        sudo update-alternatives --verbose --install /usr/bin/g++ g++ /usr/bin/g++-9 90

        sudo apt-add-repository 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main'
        curl -fL https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo apt update
        # Install llvm via apt instead of as a conan package because existing
        # conan packages do yet enable RTTI, which is required for boost
        # serialization.
        sudo apt install -yq clang-10 clang++-10 llvm-10-dev

        sudo update-alternatives --verbose --install /usr/bin/clang++ clang++ /usr/bin/clang++-10 90
        sudo update-alternatives --verbose --install /usr/bin/clang clang /usr/bin/clang-10 90

        sudo -H pip3 install --upgrade pip setuptools
        sudo -H pip3 install conan==1.24

        sudo sysctl -w kernel.core_pattern=$HOME/build/dumps/core.%e.%p.%h.%t
    - name: install dependencies
      if: startsWith(matrix.os, 'macOS-')
      run: |
        brew install ccache conan openmpi llvm

        sudo sysctl -w kern.corefile=$HOME/build/dumps/core.%N.%P.%H.%I
    - name: pre-build
      run: |
        mkdir -p $HOME/build/dumps

        GRAPH_LOCATION=$HOME/.cache/graph
        if [[ ! -d "$GRAPH_LOCATION" ]]; then
          mkdir -p "$GRAPH_LOCATION"
          curl -fL http://iss.ices.utexas.edu/projects/galois/downloads/small_inputs_for_lonestar_test.tar.gz | tar -C "$GRAPH_LOCATION" -xz -f -
        fi
    - name: install C++ dependencies
      run: |
        .github/workflows/setup_conan.sh
        conan install -if $HOME/build --build=missing config

    ###
    # Standard CMake build process
    ###
    - name: configure
      run: |
        [[ -f /proc/cpuinfo ]] && cat /proc/cpuinfo

        case ${{matrix.os}} in
          macOS-*) export PATH=$PATH:/usr/local/opt/llvm/bin ;;
          *) ;;
        esac

        case ${{matrix.cxx}} in
          clang*) CC=clang ;;
          g*)     CC=gcc   ;;
        esac

        cmake -S . -B $HOME/build \
          -DCMAKE_BUILD_TYPE=${{matrix.build_type}} \
          -DCMAKE_INSTALL_PREFIX=/tmp \
          -DCMAKE_TOOLCHAIN_FILE=$HOME/build/conan_paths.cmake \
          -DCMAKE_CXX_COMPILER=${{matrix.cxx}} \
          -DCMAKE_C_COMPILER=$CC \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
          -DENABLE_DIST_GALOIS=on \
          -DUSE_ARCH=none \
          -DGRAPH_LOCATION=$HOME/.cache/graph
    - name: build
      run: |
        cmake --build $HOME/build --parallel 4
    - name: install
      run: cmake --install $HOME/build

    - name: test
      if: startsWith(matrix.os, 'ubuntu-')
      run: |
        ulimit -c unlimited
        cd $HOME/build && ctest -V --label-regex quick --parallel 4

    # MacOS tests seem to run into CI host level failures that are hard to
    # reproduce locally. Rerun them for now.
    - name: test
      if: startsWith(matrix.os, 'macOS-')
      run: |
        ulimit -c unlimited
        cd $HOME/build && ctest -V --label-regex quick --parallel 1 --repeat until-pass:2

    # Upload path is relative to work directory and "~" and "${{env.HOME}}" do
    # not seem to be expanded, so hard code HOME for now.
    - name: upload build and test dumps
      uses: actions/upload-artifact@v1
      if: failure() && startsWith(matrix.os, 'ubuntu-')
      with:
        name: build-dump-${{matrix.os}}
        path: /home/runner/build
    - name: upload build and test dumps
      uses: actions/upload-artifact@v1
      if: failure() && startsWith(matrix.os, 'macOS-')
      with:
        name: build-dump-${{matrix.os}}
        path: /Users/runner/build
